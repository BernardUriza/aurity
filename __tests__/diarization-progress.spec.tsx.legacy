/**
 * Diarization Progress Monitoring Tests
 * File: apps/aurity/__tests__/diarization-progress.spec.tsx
 */

import React from 'react';
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, waitFor } from '@testing-library/react';
import { DiarizationJobMonitor } from '../components/DiarizationJobMonitor';
import { DiarizationResultView } from '../components/DiarizationResultView';
import * as diarizationApi from '../lib/api/diarization';

// Mock the API module
vi.mock('../lib/api/diarization', () => ({
  getDiarizationJobStatus: vi.fn(),
  getDiarizationResult: vi.fn(),
  exportDiarizationResult: vi.fn(),
}));

describe('DiarizationJobMonitor', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    vi.useFakeTimers();
  });

  afterEach(() => {
    vi.restoreAllMocks();
    vi.useRealTimers();
  });

  it('renders loading state initially', () => {
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockResolvedValue({
      job_id: 'test-job-123',
      session_id: 'session-456',
      status: 'pending',
      progress_percent: 0,
      created_at: new Date().toISOString(),
    });

    render(<DiarizationJobMonitor jobId="test-job-123" />);

    expect(screen.getByText('Loading job status...')).toBeTruthy();
  });

  it('displays progress bar for in_progress job', async () => {
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockResolvedValue({
      job_id: 'test-job-123',
      session_id: 'session-456',
      status: 'in_progress',
      progress_percent: 45,
      created_at: new Date().toISOString(),
      started_at: new Date().toISOString(),
    });

    render(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} />);

    await waitFor(() => {
      expect(screen.getByText('45%')).toBeTruthy();
    });

    const progressBar = screen.getByRole('progressbar');
    expect(progressBar).toHaveAttribute('aria-valuenow', '45');
  });

  it('updates progress periodically', async () => {
    let callCount = 0;
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockImplementation(async () => {
      callCount++;
      return {
        job_id: 'test-job-123',
        session_id: 'session-456',
        status: 'in_progress',
        progress_percent: callCount * 20,
        created_at: new Date().toISOString(),
      };
    });

    render(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} />);

    await waitFor(() => expect(screen.getByText('20%')).toBeTruthy());

    vi.advanceTimersByTime(100);
    await waitFor(() => expect(screen.getByText('40%')).toBeTruthy());

    vi.advanceTimersByTime(100);
    await waitFor(() => expect(screen.getByText('60%')).toBeTruthy());
  });

  it('displays correct phase for progress ranges', async () => {
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockResolvedValue({
      job_id: 'test-job-123',
      session_id: 'session-456',
      status: 'in_progress',
      progress_percent: 5,
      created_at: new Date().toISOString(),
    });

    const { rerender } = render(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} />);

    await waitFor(() => {
      expect(screen.getByText('Initializing...')).toBeTruthy();
    });

    // Update to mid-processing
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockResolvedValue({
      job_id: 'test-job-123',
      session_id: 'session-456',
      status: 'in_progress',
      progress_percent: 50,
      created_at: new Date().toISOString(),
    });

    rerender(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} />);

    await waitFor(() => {
      expect(screen.getByText('Processing audio chunks...')).toBeTruthy();
    });
  });

  it('stops polling when job completes', async () => {
    let callCount = 0;
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockImplementation(async () => {
      callCount++;
      if (callCount <= 2) {
        return {
          job_id: 'test-job-123',
          session_id: 'session-456',
          status: 'in_progress',
          progress_percent: 50,
          created_at: new Date().toISOString(),
        };
      }
      return {
        job_id: 'test-job-123',
        session_id: 'session-456',
        status: 'completed',
        progress_percent: 100,
        created_at: new Date().toISOString(),
        completed_at: new Date().toISOString(),
      };
    });

    vi.mocked(diarizationApi.getDiarizationResult).mockResolvedValue({
      session_id: 'session-456',
      audio_file_hash: 'sha256:abc123',
      duration_sec: 120.5,
      language: 'es',
      model_asr: 'faster-whisper/large-v3',
      model_llm: 'qwen2.5:7b',
      segments: [],
      processing_time_sec: 45.2,
      created_at: new Date().toISOString(),
    });

    const onComplete = vi.fn();
    render(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} onComplete={onComplete} />);

    await waitFor(() => {
      expect(onComplete).toHaveBeenCalled();
    });

    const initialCallCount = callCount;

    // Advance time and ensure polling stopped
    vi.advanceTimersByTime(500);
    await vi.runAllTimersAsync();

    expect(callCount).toBe(initialCallCount); // No additional calls
  });

  it('displays error on job failure', async () => {
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockResolvedValue({
      job_id: 'test-job-123',
      session_id: 'session-456',
      status: 'failed',
      progress_percent: 35,
      created_at: new Date().toISOString(),
      error_message: 'Audio file not found',
    });

    const onError = vi.fn();
    render(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} onError={onError} />);

    await waitFor(() => {
      expect(screen.getByText(/Error:/)).toBeTruthy();
      expect(screen.getByText(/Audio file not found/)).toBeTruthy();
    });

    expect(onError).toHaveBeenCalledWith('Audio file not found');
  });

  it('handles API errors gracefully', async () => {
    vi.mocked(diarizationApi.getDiarizationJobStatus).mockRejectedValue(
      new Error('Network error')
    );

    const onError = vi.fn();
    render(<DiarizationJobMonitor jobId="test-job-123" pollInterval={100} onError={onError} />);

    await waitFor(() => {
      expect(screen.getByText(/Error:/)).toBeTruthy();
      expect(screen.getByText(/Network error/)).toBeTruthy();
    });

    expect(onError).toHaveBeenCalledWith('Network error');
  });
});

describe('DiarizationResultView', () => {
  const mockResult: diarizationApi.DiarizationResult = {
    session_id: 'session-456',
    audio_file_hash: 'sha256:abc123def456',
    duration_sec: 180.5,
    language: 'es',
    model_asr: 'faster-whisper/large-v3',
    model_llm: 'qwen2.5:7b-instruct-q4_0',
    segments: [
      {
        start_time: 0,
        end_time: 15.2,
        speaker: 'PACIENTE',
        text: 'Buenos d√≠as doctor, tengo dolor de cabeza desde hace tres d√≠as.',
      },
      {
        start_time: 15.5,
        end_time: 28.1,
        speaker: 'MEDICO',
        text: 'Entiendo. ¬øEl dolor es constante o intermitente?',
      },
      {
        start_time: 28.5,
        end_time: 42.0,
        speaker: 'PACIENTE',
        text: 'Es constante, y empeora por las ma√±anas.',
      },
    ],
    processing_time_sec: 45.8,
    created_at: '2025-10-30T12:00:00Z',
  };

  it('renders result metadata correctly', () => {
    render(<DiarizationResultView result={mockResult} jobId="test-job-123" />);

    expect(screen.getByText('180.5s')).toBeTruthy();
    expect(screen.getByText('3')).toBeTruthy(); // 3 segments
    expect(screen.getByText('ES')).toBeTruthy();
    expect(screen.getByText('45.8s')).toBeTruthy();
  });

  it('displays speaker statistics', () => {
    render(<DiarizationResultView result={mockResult} jobId="test-job-123" />);

    expect(screen.getByText('üë§ Paciente')).toBeTruthy();
    expect(screen.getByText('‚öïÔ∏è M√©dico')).toBeTruthy();
  });

  it('renders all segments with correct formatting', () => {
    render(<DiarizationResultView result={mockResult} jobId="test-job-123" />);

    expect(screen.getByText(/Buenos d√≠as doctor/)).toBeTruthy();
    expect(screen.getByText(/dolor es constante/)).toBeTruthy();
    expect(screen.getByText(/empeora por las ma√±anas/)).toBeTruthy();

    expect(screen.getByText('0:00 - 0:15')).toBeTruthy();
    expect(screen.getByText('0:15 - 0:28')).toBeTruthy();
    expect(screen.getByText('0:28 - 0:42')).toBeTruthy();
  });

  it('displays model information in footer', () => {
    render(<DiarizationResultView result={mockResult} jobId="test-job-123" />);

    expect(screen.getByText('faster-whisper/large-v3')).toBeTruthy();
    expect(screen.getByText('qwen2.5:7b-instruct-q4_0')).toBeTruthy();
  });

  it('has functional export buttons', () => {
    render(<DiarizationResultView result={mockResult} jobId="test-job-123" />);

    const jsonButton = screen.getByText('üì• Export JSON');
    const markdownButton = screen.getByText('üìÑ Export Markdown');

    expect(jsonButton).toBeTruthy();
    expect(markdownButton).toBeTruthy();
    expect(jsonButton).not.toBeDisabled();
    expect(markdownButton).not.toBeDisabled();
  });

  it('displays DESCONOCIDO speaker correctly', () => {
    const resultWithUnknown = {
      ...mockResult,
      segments: [
        {
          start_time: 0,
          end_time: 10,
          speaker: 'DESCONOCIDO',
          text: 'Some unclear audio',
        },
      ],
    };

    render(<DiarizationResultView result={resultWithUnknown} jobId="test-job-123" />);

    expect(screen.getByText('‚ùì Desconocido')).toBeTruthy();
  });
});
