# =============================================================================
# AURITY FRAMEWORK - Docker Compose Configuration
# =============================================================================
# Development and production environment orchestration
# Sprint: SPR-2025W44
# Version: 0.1.0
# =============================================================================

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # Next.js Application (Development)
  # ---------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    image: aurity:0.1.0
    container_name: aurity-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - .env.local
    networks:
      - aurity-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ---------------------------------------------------------------------------
  # PostgreSQL Database
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: aurity-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-fi_prod}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./aurity/config/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aurity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fi}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------------------------------------------------------------
  # Redis Cache
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: aurity-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - aurity-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------------------------------------------------------------
  # MinIO Object Storage
  # ---------------------------------------------------------------------------
  minio:
    image: minio/minio:latest
    container_name: aurity-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-changeme123}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - aurity-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # Qdrant Vector Database
  # ---------------------------------------------------------------------------
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: aurity-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - aurity-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # TimescaleDB (IoT Metrics)
  # ---------------------------------------------------------------------------
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: aurity-timescaledb
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${METRICS_DB_USER:-metrics}
      POSTGRES_PASSWORD: ${METRICS_DB_PASSWORD:-changeme}
      POSTGRES_DB: metrics
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    networks:
      - aurity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${METRICS_DB_USER:-metrics}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------------------------------------------------------------
  # Meilisearch (Full-Text Search)
  # ---------------------------------------------------------------------------
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: aurity-meilisearch
    restart: unless-stopped
    ports:
      - "7700:7700"
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-changeme}
      MEILI_NO_ANALYTICS: "true"
      MEILI_ENV: production
    volumes:
      - meilisearch-data:/meili_data
    networks:
      - aurity-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # Eclipse Mosquitto (MQTT Broker for IoT)
  # ---------------------------------------------------------------------------
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: aurity-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "8883:8883"
    volumes:
      - mosquitto-config:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    networks:
      - aurity-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  qdrant-data:
    driver: local
  timescaledb-data:
    driver: local
  meilisearch-data:
    driver: local
  mosquitto-config:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  aurity-network:
    driver: bridge
    name: aurity-network

# =============================================================================
# Usage:
# Development:  docker-compose up -d
# Production:   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# Stop:         docker-compose down
# Logs:         docker-compose logs -f [service]
# Reset:        docker-compose down -v (WARNING: Deletes all data!)
# =============================================================================
